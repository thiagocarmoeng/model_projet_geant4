#include "construction/DetectorConstruction.hh"

#include "G4Box.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4NistManager.hh"
#include "G4SystemOfUnits.hh"
#include "G4VisAttributes.hh"

DetectorConstruction::DetectorConstruction()
{
    // Construtor vazio
}

G4VPhysicalVolume* DetectorConstruction::Construct()
{
    // Inst√¢ncia do gerenciador de materiais
    G4NistManager* nist = G4NistManager::Instance();

    // -----------------------------
    // 1. Cria√ß√£o do Mundo
    // -----------------------------

    // Material do mundo (ar)
    G4Material* worldMaterial = nist->FindOrBuildMaterial("G4_AIR");

    // Dimens√µes do mundo (cubo de 1 metro de lado)
    G4double worldSize = 1.0 * m;

    // S√≥lido do mundo
    G4Box* solidWorld = new G4Box("World",
                                  0.5 * worldSize,
                                  0.5 * worldSize,
                                  0.5 * worldSize);

    // Volume l√≥gico do mundo
    G4LogicalVolume* logicWorld = new G4LogicalVolume(solidWorld,
                                                      worldMaterial,
                                                      "World");

    // Volume f√≠sico do mundo
    G4VPhysicalVolume* physWorld = new G4PVPlacement(
        nullptr,               // Sem rota√ß√£o
        G4ThreeVector(),        // Sem transla√ß√£o
        logicWorld,             // Volume l√≥gico
        "World",                // Nome
        nullptr,                // Sem m√£e (√© o mundo)
        false,                  // N√£o replicado
        0,                      // N√∫mero da c√≥pia
        true                    // Verificar sobreposi√ß√£o
    );

    // üî• Deixar o mundo invis√≠vel (para enxergar o que tem dentro)
    logicWorld->SetVisAttributes(G4VisAttributes::GetInvisible());

    // -----------------------------
    // 2. Cria√ß√£o de um Cubo Detector
    // -----------------------------

    // Material do cubo (√°gua)
    G4Material* boxMaterial = nist->FindOrBuildMaterial("G4_WATER");

    // Dimens√µes do cubo (20 cm de aresta)
    G4double boxSize = 20.0 * cm;

    // S√≥lido do cubo
    G4Box* solidBox = new G4Box("Box",
                                0.5 * boxSize,
                                0.5 * boxSize,
                                0.5 * boxSize);

    // Volume l√≥gico do cubo
    G4LogicalVolume* logicBox = new G4LogicalVolume(solidBox,
                                                    boxMaterial,
                                                    "Box");

    // Volume f√≠sico do cubo, posicionado no centro do mundo
    new G4PVPlacement(
        nullptr,                // Sem rota√ß√£o
        G4ThreeVector(0, 0, 0),  // No centro do mundo
        logicBox,                // Volume l√≥gico
        "Box",                   // Nome
        logicWorld,              // Volume m√£e (o mundo)
        false,                   // N√£o replicado
        0,                       // N√∫mero da c√≥pia
        true                     // Verificar sobreposi√ß√£o
    );

    // üî• Definir atributos visuais do cubo
    G4VisAttributes* visBox = new G4VisAttributes(G4Colour(0.0, 0.0, 1.0, 0.3)); // Azul claro
    visBox->SetVisibility(true);
    visBox->SetForceSolid(true); // Apar√™ncia s√≥lida
    logicBox->SetVisAttributes(visBox);

    // -----------------------------
    // Retorna o volume f√≠sico do mundo
    // -----------------------------

    return physWorld;
}
